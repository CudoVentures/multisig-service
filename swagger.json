{
  "openapi": "3.0.1",
  "info": {
    "title": "Swagger Petstore",
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/pet": {
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "operationId": "addPet",
        "requestBody": {
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "default": "available",
                "enum": ["available", "pending", "sold"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value",
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the pet"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the pet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          }
        }
      }
    },
    "/multisig": {
      "post": {
        "tags": ["multisig"],
        "summary": "Create multisig",
        "description": "Creates a single multisig",
        "operationId": "postMultisig",
        "requestBody": {
          "description": "Multisig object that needs to be added to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Multisig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Multisig"
                }
              }
            }
          }
        }
      }
    },
    "/multisig/{address}": {
      "get": {
        "tags": ["multisig"],
        "summary": "Get multisig by address",
        "description": "Returns a single multisig",
        "operationId": "getMultisig",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address of multisig to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Multisig"
                }
              }
            }
          },
          "400": {
            "description": "Invalid address supplied",
            "content": {}
          },
          "404": {
            "description": "Address not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["multisig"],
        "summary": "Update multisig by address",
        "description": "Updates a single multisig",
        "operationId": "putMultisig",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address of multisig to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the multisig object that needs to be updated in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Multisig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Multisig"
                }
              }
            }
          },
          "400": {
            "description": "Invalid address supplied",
            "content": {}
          },
          "404": {
            "description": "Address not found",
            "content": {}
          }
        }
      }
    },
    "/multisig/{address}/transactions": {
      "get": {
        "tags": ["multisig"],
        "summary": "Fetch transactions of given multisig",
        "description": "Returns all transactions of a multisig",
        "operationId": "fetchTransactions",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address of multisig to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid address supplied",
            "content": {}
          },
          "404": {
            "description": "Address not found",
            "content": {}
          }
        }
      }
    },
    "/transaction": {
      "post": {
        "tags": ["transaction"],
        "summary": "Create transaction",
        "description": "Creates a single transaction",
        "operationId": "postTransaction",
        "requestBody": {
          "description": "Transaction object that needs to be added to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/{id}": {
      "get": {
        "tags": ["transaction"],
        "summary": "Get transaction by id",
        "description": "Get transactions by id",
        "operationId": "getTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a transaction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied",
            "content": {}
          },
          "404": {
            "description": "Transaction not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["transaction"],
        "summary": "Update transaction by id",
        "description": "Update transactions by id",
        "operationId": "putTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a transaction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Transaction object that needs to be updated in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied",
            "content": {}
          },
          "404": {
            "description": "Transaction not found",
            "content": {}
          }
        }
      }
    },
    "/transaction/{id}/signature": {
      "get": {
        "tags": ["transaction"],
        "summary": "Get all signatures of a transaction by id",
        "description": "Get all signatures of a transaction by id",
        "operationId": "fetchSignatures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a transaction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Signature"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied",
            "content": {}
          },
          "404": {
            "description": "Transaction not found",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["transaction"],
        "summary": "Create a signature for a transaction by id",
        "description": "Create a signature for a transaction by id",
        "operationId": "postSignature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a transaction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Transaction object that needs to be updated in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signature"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signature"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied",
            "content": {}
          },
          "404": {
            "description": "Transaction not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Multisig": {
        "required": ["address", "name", "pubkey", "owners"],
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "cudos1ahrf2v2kdgf74mwyssxqwsmty8hq4h3znu9pc0"
          },
          "name": {
            "type": "string",
            "example": "My Wallet"
          },
          "pubkey": {
            "type": "string"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string",
              "example": [
                "cudos1ahrf2v2kdgf74mwyssxqwsmty8hq4h3znu9pc0",
                "cudos1ahrf2v2kdgf74mwyssxqwsmty8hq4h3znu9pc0"
              ]
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Transaction": {
        "required": [
          "accountNumber",
          "chainId",
          "fee",
          "msgs",
          "multisigAddress",
          "hasSigned",
          "status",
          "sequence",
          "type"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "integer",
            "format": "int32"
          },
          "hash": {
            "type": "string",
            "example": "A81AA1979C0EB21BB197DE7400B693C71521763BA911EDCE7F37878C6B1CAACA",
            "nullable": true
          },
          "chainId": {
            "type": "string",
            "example": "cudos-testnet-public-2"
          },
          "fee": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "array"
              },
              "gas": {
                "type": "string",
                "example": "180000"
              }
            }
          },
          "memo": {
            "type": "string",
            "example": "Here's some CUDOS"
          },
          "msgs": {
            "type": "array"
          },
          "multisigAddress": {
            "type": "string",
            "example": "cudos1ahrf2v2kdgf74mwyssxqwsmty8hq4h3znu9pc0"
          },
          "hasSigned": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": ["pending", "executed", "rejected"]
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": ["send", "receive"]
          },
          "executionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Signature": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string"
          },
          "bodyBytes": {
            "type": "string"
          },
          "transactionId": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
